#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3620
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLibrary.Repository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SilverskyServices")]
	public partial class TCRepositoryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttbl_Tickets(tbl_Tickets instance);
    partial void Updatetbl_Tickets(tbl_Tickets instance);
    partial void Deletetbl_Tickets(tbl_Tickets instance);
    partial void Inserttbl_Roles(tbl_Roles instance);
    partial void Updatetbl_Roles(tbl_Roles instance);
    partial void Deletetbl_Roles(tbl_Roles instance);
    partial void Inserttbl_Status(tbl_Status instance);
    partial void Updatetbl_Status(tbl_Status instance);
    partial void Deletetbl_Status(tbl_Status instance);
    partial void Inserttbl_Roles_SiteMap(tbl_Roles_SiteMap instance);
    partial void Updatetbl_Roles_SiteMap(tbl_Roles_SiteMap instance);
    partial void Deletetbl_Roles_SiteMap(tbl_Roles_SiteMap instance);
    partial void Inserttbl_SiteMap(tbl_SiteMap instance);
    partial void Updatetbl_SiteMap(tbl_SiteMap instance);
    partial void Deletetbl_SiteMap(tbl_SiteMap instance);
    partial void Inserttbl_Categories(tbl_Categories instance);
    partial void Updatetbl_Categories(tbl_Categories instance);
    partial void Deletetbl_Categories(tbl_Categories instance);
    partial void Inserttbl_Companies(tbl_Companies instance);
    partial void Updatetbl_Companies(tbl_Companies instance);
    partial void Deletetbl_Companies(tbl_Companies instance);
    partial void Inserttbl_Applications(tbl_Applications instance);
    partial void Updatetbl_Applications(tbl_Applications instance);
    partial void Deletetbl_Applications(tbl_Applications instance);
    partial void Inserttbl_Users(tbl_Users instance);
    partial void Updatetbl_Users(tbl_Users instance);
    partial void Deletetbl_Users(tbl_Users instance);
    partial void Inserttbl_GlobalAttributes(tbl_GlobalAttributes instance);
    partial void Updatetbl_GlobalAttributes(tbl_GlobalAttributes instance);
    partial void Deletetbl_GlobalAttributes(tbl_GlobalAttributes instance);
    partial void Inserttbl_Comments(tbl_Comments instance);
    partial void Updatetbl_Comments(tbl_Comments instance);
    partial void Deletetbl_Comments(tbl_Comments instance);
    partial void Inserttbl_GlobalAttributesSCM(tbl_GlobalAttributesSCM instance);
    partial void Updatetbl_GlobalAttributesSCM(tbl_GlobalAttributesSCM instance);
    partial void Deletetbl_GlobalAttributesSCM(tbl_GlobalAttributesSCM instance);
    #endregion
		
		public TCRepositoryDataContext() : 
				base(global::DataAccessLibrary.Properties.Settings.Default.SilverskyServicesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TCRepositoryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TCRepositoryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TCRepositoryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TCRepositoryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbl_Tickets> tbl_Tickets
		{
			get
			{
				return this.GetTable<tbl_Tickets>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Roles> tbl_Roles
		{
			get
			{
				return this.GetTable<tbl_Roles>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Status> tbl_Status
		{
			get
			{
				return this.GetTable<tbl_Status>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Roles_SiteMap> tbl_Roles_SiteMap
		{
			get
			{
				return this.GetTable<tbl_Roles_SiteMap>();
			}
		}
		
		public System.Data.Linq.Table<tbl_SiteMap> tbl_SiteMap
		{
			get
			{
				return this.GetTable<tbl_SiteMap>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Categories> tbl_Categories
		{
			get
			{
				return this.GetTable<tbl_Categories>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Companies> tbl_Companies
		{
			get
			{
				return this.GetTable<tbl_Companies>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Applications> tbl_Applications
		{
			get
			{
				return this.GetTable<tbl_Applications>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Users> tbl_Users
		{
			get
			{
				return this.GetTable<tbl_Users>();
			}
		}
		
		public System.Data.Linq.Table<tbl_GlobalAttributes> tbl_GlobalAttributes
		{
			get
			{
				return this.GetTable<tbl_GlobalAttributes>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Comments> tbl_Comments
		{
			get
			{
				return this.GetTable<tbl_Comments>();
			}
		}
		
		public System.Data.Linq.Table<tbl_GlobalAttributesSCM> tbl_GlobalAttributesSCM
		{
			get
			{
				return this.GetTable<tbl_GlobalAttributesSCM>();
			}
		}
	}
	
	[Table(Name="TicketControl.tbl_Tickets")]
	public partial class tbl_Tickets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTicket;
		
		private int _IdCategory;
		
		private int _IdAssignedTo;
		
		private string _Description;
		
		private System.DateTime _CreatedOn;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _ClosedOn;
		
		private System.Nullable<System.DateTime> _ClosedOnByUser;
		
		private string _CloseDescription;
		
		private int _IdPriority;
		
		private string _TicketStatus;
		
		private EntityRef<tbl_Categories> _tbl_Categories;
		
		private EntityRef<tbl_Users> _tbl_Users;
		
		private EntityRef<tbl_Users> _tbl_Users1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTicketChanging(int value);
    partial void OnIdTicketChanged();
    partial void OnIdCategoryChanging(int value);
    partial void OnIdCategoryChanged();
    partial void OnIdAssignedToChanging(int value);
    partial void OnIdAssignedToChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnClosedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedOnChanged();
    partial void OnClosedOnByUserChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedOnByUserChanged();
    partial void OnCloseDescriptionChanging(string value);
    partial void OnCloseDescriptionChanged();
    partial void OnIdPriorityChanging(int value);
    partial void OnIdPriorityChanged();
    partial void OnTicketStatusChanging(string value);
    partial void OnTicketStatusChanged();
    #endregion
		
		public tbl_Tickets()
		{
			this._tbl_Categories = default(EntityRef<tbl_Categories>);
			this._tbl_Users = default(EntityRef<tbl_Users>);
			this._tbl_Users1 = default(EntityRef<tbl_Users>);
			OnCreated();
		}
		
		[Column(Storage="_IdTicket", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTicket
		{
			get
			{
				return this._IdTicket;
			}
			set
			{
				if ((this._IdTicket != value))
				{
					this.OnIdTicketChanging(value);
					this.SendPropertyChanging();
					this._IdTicket = value;
					this.SendPropertyChanged("IdTicket");
					this.OnIdTicketChanged();
				}
			}
		}
		
		[Column(Storage="_IdCategory", DbType="Int NOT NULL")]
		public int IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					if (this._tbl_Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_IdAssignedTo", DbType="Int NOT NULL")]
		public int IdAssignedTo
		{
			get
			{
				return this._IdAssignedTo;
			}
			set
			{
				if ((this._IdAssignedTo != value))
				{
					if (this._tbl_Users1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAssignedToChanging(value);
					this.SendPropertyChanging();
					this._IdAssignedTo = value;
					this.SendPropertyChanged("IdAssignedTo");
					this.OnIdAssignedToChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._tbl_Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ClosedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedOn
		{
			get
			{
				return this._ClosedOn;
			}
			set
			{
				if ((this._ClosedOn != value))
				{
					this.OnClosedOnChanging(value);
					this.SendPropertyChanging();
					this._ClosedOn = value;
					this.SendPropertyChanged("ClosedOn");
					this.OnClosedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ClosedOnByUser", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedOnByUser
		{
			get
			{
				return this._ClosedOnByUser;
			}
			set
			{
				if ((this._ClosedOnByUser != value))
				{
					this.OnClosedOnByUserChanging(value);
					this.SendPropertyChanging();
					this._ClosedOnByUser = value;
					this.SendPropertyChanged("ClosedOnByUser");
					this.OnClosedOnByUserChanged();
				}
			}
		}
		
		[Column(Storage="_CloseDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string CloseDescription
		{
			get
			{
				return this._CloseDescription;
			}
			set
			{
				if ((this._CloseDescription != value))
				{
					this.OnCloseDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CloseDescription = value;
					this.SendPropertyChanged("CloseDescription");
					this.OnCloseDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IdPriority", DbType="Int NOT NULL")]
		public int IdPriority
		{
			get
			{
				return this._IdPriority;
			}
			set
			{
				if ((this._IdPriority != value))
				{
					this.OnIdPriorityChanging(value);
					this.SendPropertyChanging();
					this._IdPriority = value;
					this.SendPropertyChanged("IdPriority");
					this.OnIdPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_TicketStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TicketStatus
		{
			get
			{
				return this._TicketStatus;
			}
			set
			{
				if ((this._TicketStatus != value))
				{
					this.OnTicketStatusChanging(value);
					this.SendPropertyChanging();
					this._TicketStatus = value;
					this.SendPropertyChanged("TicketStatus");
					this.OnTicketStatusChanged();
				}
			}
		}
		
		[Association(Name="tbl_Categories_tbl_Tickets", Storage="_tbl_Categories", ThisKey="IdCategory", OtherKey="IdCategory", IsForeignKey=true)]
		public tbl_Categories tbl_Categories
		{
			get
			{
				return this._tbl_Categories.Entity;
			}
			set
			{
				tbl_Categories previousValue = this._tbl_Categories.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Categories.Entity = null;
						previousValue.tbl_Tickets.Remove(this);
					}
					this._tbl_Categories.Entity = value;
					if ((value != null))
					{
						value.tbl_Tickets.Add(this);
						this._IdCategory = value.IdCategory;
					}
					else
					{
						this._IdCategory = default(int);
					}
					this.SendPropertyChanged("tbl_Categories");
				}
			}
		}
		
		[Association(Name="tbl_Users_tbl_Tickets", Storage="_tbl_Users", ThisKey="CreatedBy", OtherKey="IdUser", IsForeignKey=true)]
		public tbl_Users tbl_Users
		{
			get
			{
				return this._tbl_Users.Entity;
			}
			set
			{
				tbl_Users previousValue = this._tbl_Users.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Users.Entity = null;
						previousValue.tbl_Tickets.Remove(this);
					}
					this._tbl_Users.Entity = value;
					if ((value != null))
					{
						value.tbl_Tickets.Add(this);
						this._CreatedBy = value.IdUser;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("tbl_Users");
				}
			}
		}
		
		[Association(Name="tbl_Users_tbl_Tickets1", Storage="_tbl_Users1", ThisKey="IdAssignedTo", OtherKey="IdUser", IsForeignKey=true)]
		public tbl_Users tbl_Users1
		{
			get
			{
				return this._tbl_Users1.Entity;
			}
			set
			{
				tbl_Users previousValue = this._tbl_Users1.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Users1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Users1.Entity = null;
						previousValue.tbl_Tickets1.Remove(this);
					}
					this._tbl_Users1.Entity = value;
					if ((value != null))
					{
						value.tbl_Tickets1.Add(this);
						this._IdAssignedTo = value.IdUser;
					}
					else
					{
						this._IdAssignedTo = default(int);
					}
					this.SendPropertyChanged("tbl_Users1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_Roles")]
	public partial class tbl_Roles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRole;
		
		private string _Name;
		
		private string _Description;
		
		private string _RoleCode;
		
		private int _IdStatus;
		
		private int _IdApplication;
		
		private EntitySet<tbl_Roles_SiteMap> _tbl_Roles_SiteMap;
		
		private EntitySet<tbl_Users> _tbl_Users;
		
		private EntityRef<tbl_Status> _tbl_Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRoleChanging(int value);
    partial void OnIdRoleChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRoleCodeChanging(string value);
    partial void OnRoleCodeChanged();
    partial void OnIdStatusChanging(int value);
    partial void OnIdStatusChanged();
    partial void OnIdApplicationChanging(int value);
    partial void OnIdApplicationChanged();
    #endregion
		
		public tbl_Roles()
		{
			this._tbl_Roles_SiteMap = new EntitySet<tbl_Roles_SiteMap>(new Action<tbl_Roles_SiteMap>(this.attach_tbl_Roles_SiteMap), new Action<tbl_Roles_SiteMap>(this.detach_tbl_Roles_SiteMap));
			this._tbl_Users = new EntitySet<tbl_Users>(new Action<tbl_Users>(this.attach_tbl_Users), new Action<tbl_Users>(this.detach_tbl_Users));
			this._tbl_Status = default(EntityRef<tbl_Status>);
			OnCreated();
		}
		
		[Column(Storage="_IdRole", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_RoleCode", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleCode
		{
			get
			{
				return this._RoleCode;
			}
			set
			{
				if ((this._RoleCode != value))
				{
					this.OnRoleCodeChanging(value);
					this.SendPropertyChanging();
					this._RoleCode = value;
					this.SendPropertyChanged("RoleCode");
					this.OnRoleCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IdStatus", DbType="Int NOT NULL")]
		public int IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					if (this._tbl_Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[Column(Storage="_IdApplication", DbType="Int NOT NULL")]
		public int IdApplication
		{
			get
			{
				return this._IdApplication;
			}
			set
			{
				if ((this._IdApplication != value))
				{
					this.OnIdApplicationChanging(value);
					this.SendPropertyChanging();
					this._IdApplication = value;
					this.SendPropertyChanged("IdApplication");
					this.OnIdApplicationChanged();
				}
			}
		}
		
		[Association(Name="tbl_Roles_tbl_Roles_SiteMap", Storage="_tbl_Roles_SiteMap", ThisKey="IdRole", OtherKey="IdRole")]
		public EntitySet<tbl_Roles_SiteMap> tbl_Roles_SiteMap
		{
			get
			{
				return this._tbl_Roles_SiteMap;
			}
			set
			{
				this._tbl_Roles_SiteMap.Assign(value);
			}
		}
		
		[Association(Name="tbl_Roles_tbl_Users", Storage="_tbl_Users", ThisKey="IdRole", OtherKey="IdRole")]
		public EntitySet<tbl_Users> tbl_Users
		{
			get
			{
				return this._tbl_Users;
			}
			set
			{
				this._tbl_Users.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_Roles", Storage="_tbl_Status", ThisKey="IdStatus", OtherKey="IdStatus", IsForeignKey=true)]
		public tbl_Status tbl_Status
		{
			get
			{
				return this._tbl_Status.Entity;
			}
			set
			{
				tbl_Status previousValue = this._tbl_Status.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Status.Entity = null;
						previousValue.tbl_Roles.Remove(this);
					}
					this._tbl_Status.Entity = value;
					if ((value != null))
					{
						value.tbl_Roles.Add(this);
						this._IdStatus = value.IdStatus;
					}
					else
					{
						this._IdStatus = default(int);
					}
					this.SendPropertyChanged("tbl_Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Roles_SiteMap(tbl_Roles_SiteMap entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Roles = this;
		}
		
		private void detach_tbl_Roles_SiteMap(tbl_Roles_SiteMap entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Roles = null;
		}
		
		private void attach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Roles = this;
		}
		
		private void detach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Roles = null;
		}
	}
	
	[Table(Name="dbo.tbl_Status")]
	public partial class tbl_Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdStatus;
		
		private string _Name;
		
		private EntitySet<tbl_Roles> _tbl_Roles;
		
		private EntitySet<tbl_SiteMap> _tbl_SiteMap;
		
		private EntitySet<tbl_Categories> _tbl_Categories;
		
		private EntitySet<tbl_Companies> _tbl_Companies;
		
		private EntitySet<tbl_Users> _tbl_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStatusChanging(int value);
    partial void OnIdStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tbl_Status()
		{
			this._tbl_Roles = new EntitySet<tbl_Roles>(new Action<tbl_Roles>(this.attach_tbl_Roles), new Action<tbl_Roles>(this.detach_tbl_Roles));
			this._tbl_SiteMap = new EntitySet<tbl_SiteMap>(new Action<tbl_SiteMap>(this.attach_tbl_SiteMap), new Action<tbl_SiteMap>(this.detach_tbl_SiteMap));
			this._tbl_Categories = new EntitySet<tbl_Categories>(new Action<tbl_Categories>(this.attach_tbl_Categories), new Action<tbl_Categories>(this.detach_tbl_Categories));
			this._tbl_Companies = new EntitySet<tbl_Companies>(new Action<tbl_Companies>(this.attach_tbl_Companies), new Action<tbl_Companies>(this.detach_tbl_Companies));
			this._tbl_Users = new EntitySet<tbl_Users>(new Action<tbl_Users>(this.attach_tbl_Users), new Action<tbl_Users>(this.detach_tbl_Users));
			OnCreated();
		}
		
		[Column(Storage="_IdStatus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="tbl_Status_tbl_Roles", Storage="_tbl_Roles", ThisKey="IdStatus", OtherKey="IdStatus")]
		public EntitySet<tbl_Roles> tbl_Roles
		{
			get
			{
				return this._tbl_Roles;
			}
			set
			{
				this._tbl_Roles.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_SiteMap", Storage="_tbl_SiteMap", ThisKey="IdStatus", OtherKey="IdStatus")]
		public EntitySet<tbl_SiteMap> tbl_SiteMap
		{
			get
			{
				return this._tbl_SiteMap;
			}
			set
			{
				this._tbl_SiteMap.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_Categories", Storage="_tbl_Categories", ThisKey="IdStatus", OtherKey="IdStatus")]
		public EntitySet<tbl_Categories> tbl_Categories
		{
			get
			{
				return this._tbl_Categories;
			}
			set
			{
				this._tbl_Categories.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_Companies", Storage="_tbl_Companies", ThisKey="IdStatus", OtherKey="IdStatus")]
		public EntitySet<tbl_Companies> tbl_Companies
		{
			get
			{
				return this._tbl_Companies;
			}
			set
			{
				this._tbl_Companies.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_Users", Storage="_tbl_Users", ThisKey="IdStatus", OtherKey="IdStatus")]
		public EntitySet<tbl_Users> tbl_Users
		{
			get
			{
				return this._tbl_Users;
			}
			set
			{
				this._tbl_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Roles(tbl_Roles entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = this;
		}
		
		private void detach_tbl_Roles(tbl_Roles entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = null;
		}
		
		private void attach_tbl_SiteMap(tbl_SiteMap entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = this;
		}
		
		private void detach_tbl_SiteMap(tbl_SiteMap entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = null;
		}
		
		private void attach_tbl_Categories(tbl_Categories entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = this;
		}
		
		private void detach_tbl_Categories(tbl_Categories entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = null;
		}
		
		private void attach_tbl_Companies(tbl_Companies entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = this;
		}
		
		private void detach_tbl_Companies(tbl_Companies entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = null;
		}
		
		private void attach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = this;
		}
		
		private void detach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Status = null;
		}
	}
	
	[Table(Name="dbo.tbl_Roles_SiteMap")]
	public partial class tbl_Roles_SiteMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRole;
		
		private int _IdSiteMap;
		
		private EntityRef<tbl_Roles> _tbl_Roles;
		
		private EntityRef<tbl_SiteMap> _tbl_SiteMap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRoleChanging(int value);
    partial void OnIdRoleChanged();
    partial void OnIdSiteMapChanging(int value);
    partial void OnIdSiteMapChanged();
    #endregion
		
		public tbl_Roles_SiteMap()
		{
			this._tbl_Roles = default(EntityRef<tbl_Roles>);
			this._tbl_SiteMap = default(EntityRef<tbl_SiteMap>);
			OnCreated();
		}
		
		[Column(Storage="_IdRole", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					if (this._tbl_Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[Column(Storage="_IdSiteMap", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdSiteMap
		{
			get
			{
				return this._IdSiteMap;
			}
			set
			{
				if ((this._IdSiteMap != value))
				{
					this.OnIdSiteMapChanging(value);
					this.SendPropertyChanging();
					this._IdSiteMap = value;
					this.SendPropertyChanged("IdSiteMap");
					this.OnIdSiteMapChanged();
				}
			}
		}
		
		[Association(Name="tbl_Roles_tbl_Roles_SiteMap", Storage="_tbl_Roles", ThisKey="IdRole", OtherKey="IdRole", IsForeignKey=true)]
		public tbl_Roles tbl_Roles
		{
			get
			{
				return this._tbl_Roles.Entity;
			}
			set
			{
				tbl_Roles previousValue = this._tbl_Roles.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Roles.Entity = null;
						previousValue.tbl_Roles_SiteMap.Remove(this);
					}
					this._tbl_Roles.Entity = value;
					if ((value != null))
					{
						value.tbl_Roles_SiteMap.Add(this);
						this._IdRole = value.IdRole;
					}
					else
					{
						this._IdRole = default(int);
					}
					this.SendPropertyChanged("tbl_Roles");
				}
			}
		}
		
		[Association(Name="tbl_SiteMap_tbl_Roles_SiteMap", Storage="_tbl_SiteMap", ThisKey="IdRole", OtherKey="IdSiteMap", IsForeignKey=true)]
		public tbl_SiteMap tbl_SiteMap
		{
			get
			{
				return this._tbl_SiteMap.Entity;
			}
			set
			{
				tbl_SiteMap previousValue = this._tbl_SiteMap.Entity;
				if (((previousValue != value) 
							|| (this._tbl_SiteMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_SiteMap.Entity = null;
						previousValue.tbl_Roles_SiteMap.Remove(this);
					}
					this._tbl_SiteMap.Entity = value;
					if ((value != null))
					{
						value.tbl_Roles_SiteMap.Add(this);
						this._IdRole = value.IdSiteMap;
					}
					else
					{
						this._IdRole = default(int);
					}
					this.SendPropertyChanged("tbl_SiteMap");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_SiteMap")]
	public partial class tbl_SiteMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdSiteMap;
		
		private string _Name;
		
		private string _RoleCode;
		
		private string _Description;
		
		private string _URL;
		
		private System.Nullable<int> _IdStatus;
		
		private bool _IsBrowsable;
		
		private System.Nullable<int> _IdParent;
		
		private EntitySet<tbl_Roles_SiteMap> _tbl_Roles_SiteMap;
		
		private EntityRef<tbl_Status> _tbl_Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSiteMapChanging(int value);
    partial void OnIdSiteMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRoleCodeChanging(string value);
    partial void OnRoleCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnIdStatusChanging(System.Nullable<int> value);
    partial void OnIdStatusChanged();
    partial void OnIsBrowsableChanging(bool value);
    partial void OnIsBrowsableChanged();
    partial void OnIdParentChanging(System.Nullable<int> value);
    partial void OnIdParentChanged();
    #endregion
		
		public tbl_SiteMap()
		{
			this._tbl_Roles_SiteMap = new EntitySet<tbl_Roles_SiteMap>(new Action<tbl_Roles_SiteMap>(this.attach_tbl_Roles_SiteMap), new Action<tbl_Roles_SiteMap>(this.detach_tbl_Roles_SiteMap));
			this._tbl_Status = default(EntityRef<tbl_Status>);
			OnCreated();
		}
		
		[Column(Storage="_IdSiteMap", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdSiteMap
		{
			get
			{
				return this._IdSiteMap;
			}
			set
			{
				if ((this._IdSiteMap != value))
				{
					this.OnIdSiteMapChanging(value);
					this.SendPropertyChanging();
					this._IdSiteMap = value;
					this.SendPropertyChanged("IdSiteMap");
					this.OnIdSiteMapChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RoleCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleCode
		{
			get
			{
				return this._RoleCode;
			}
			set
			{
				if ((this._RoleCode != value))
				{
					this.OnRoleCodeChanging(value);
					this.SendPropertyChanging();
					this._RoleCode = value;
					this.SendPropertyChanged("RoleCode");
					this.OnRoleCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_URL", DbType="VarChar(100)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[Column(Storage="_IdStatus", DbType="Int")]
		public System.Nullable<int> IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					if (this._tbl_Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[Column(Storage="_IsBrowsable", DbType="Bit NOT NULL")]
		public bool IsBrowsable
		{
			get
			{
				return this._IsBrowsable;
			}
			set
			{
				if ((this._IsBrowsable != value))
				{
					this.OnIsBrowsableChanging(value);
					this.SendPropertyChanging();
					this._IsBrowsable = value;
					this.SendPropertyChanged("IsBrowsable");
					this.OnIsBrowsableChanged();
				}
			}
		}
		
		[Column(Storage="_IdParent", DbType="Int")]
		public System.Nullable<int> IdParent
		{
			get
			{
				return this._IdParent;
			}
			set
			{
				if ((this._IdParent != value))
				{
					this.OnIdParentChanging(value);
					this.SendPropertyChanging();
					this._IdParent = value;
					this.SendPropertyChanged("IdParent");
					this.OnIdParentChanged();
				}
			}
		}
		
		[Association(Name="tbl_SiteMap_tbl_Roles_SiteMap", Storage="_tbl_Roles_SiteMap", ThisKey="IdSiteMap", OtherKey="IdRole")]
		public EntitySet<tbl_Roles_SiteMap> tbl_Roles_SiteMap
		{
			get
			{
				return this._tbl_Roles_SiteMap;
			}
			set
			{
				this._tbl_Roles_SiteMap.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_SiteMap", Storage="_tbl_Status", ThisKey="IdStatus", OtherKey="IdStatus", IsForeignKey=true)]
		public tbl_Status tbl_Status
		{
			get
			{
				return this._tbl_Status.Entity;
			}
			set
			{
				tbl_Status previousValue = this._tbl_Status.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Status.Entity = null;
						previousValue.tbl_SiteMap.Remove(this);
					}
					this._tbl_Status.Entity = value;
					if ((value != null))
					{
						value.tbl_SiteMap.Add(this);
						this._IdStatus = value.IdStatus;
					}
					else
					{
						this._IdStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Roles_SiteMap(tbl_Roles_SiteMap entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SiteMap = this;
		}
		
		private void detach_tbl_Roles_SiteMap(tbl_Roles_SiteMap entity)
		{
			this.SendPropertyChanging();
			entity.tbl_SiteMap = null;
		}
	}
	
	[Table(Name="TicketControl.tbl_Categories")]
	public partial class tbl_Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategory;
		
		private string _Name;
		
		private string _Description;
		
		private int _IdUserAssigned;
		
		private string _AlternativeMail;
		
		private int _IdStatus;
		
		private EntitySet<tbl_Tickets> _tbl_Tickets;
		
		private EntityRef<tbl_Status> _tbl_Status;
		
		private EntityRef<tbl_Users> _tbl_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryChanging(int value);
    partial void OnIdCategoryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdUserAssignedChanging(int value);
    partial void OnIdUserAssignedChanged();
    partial void OnAlternativeMailChanging(string value);
    partial void OnAlternativeMailChanged();
    partial void OnIdStatusChanging(int value);
    partial void OnIdStatusChanged();
    #endregion
		
		public tbl_Categories()
		{
			this._tbl_Tickets = new EntitySet<tbl_Tickets>(new Action<tbl_Tickets>(this.attach_tbl_Tickets), new Action<tbl_Tickets>(this.detach_tbl_Tickets));
			this._tbl_Status = default(EntityRef<tbl_Status>);
			this._tbl_Users = default(EntityRef<tbl_Users>);
			OnCreated();
		}
		
		[Column(Storage="_IdCategory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IdUserAssigned", DbType="Int NOT NULL")]
		public int IdUserAssigned
		{
			get
			{
				return this._IdUserAssigned;
			}
			set
			{
				if ((this._IdUserAssigned != value))
				{
					if (this._tbl_Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserAssignedChanging(value);
					this.SendPropertyChanging();
					this._IdUserAssigned = value;
					this.SendPropertyChanged("IdUserAssigned");
					this.OnIdUserAssignedChanged();
				}
			}
		}
		
		[Column(Storage="_AlternativeMail", DbType="VarChar(50)")]
		public string AlternativeMail
		{
			get
			{
				return this._AlternativeMail;
			}
			set
			{
				if ((this._AlternativeMail != value))
				{
					this.OnAlternativeMailChanging(value);
					this.SendPropertyChanging();
					this._AlternativeMail = value;
					this.SendPropertyChanged("AlternativeMail");
					this.OnAlternativeMailChanged();
				}
			}
		}
		
		[Column(Storage="_IdStatus", DbType="Int NOT NULL")]
		public int IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					if (this._tbl_Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[Association(Name="tbl_Categories_tbl_Tickets", Storage="_tbl_Tickets", ThisKey="IdCategory", OtherKey="IdCategory")]
		public EntitySet<tbl_Tickets> tbl_Tickets
		{
			get
			{
				return this._tbl_Tickets;
			}
			set
			{
				this._tbl_Tickets.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_Categories", Storage="_tbl_Status", ThisKey="IdStatus", OtherKey="IdStatus", IsForeignKey=true)]
		public tbl_Status tbl_Status
		{
			get
			{
				return this._tbl_Status.Entity;
			}
			set
			{
				tbl_Status previousValue = this._tbl_Status.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Status.Entity = null;
						previousValue.tbl_Categories.Remove(this);
					}
					this._tbl_Status.Entity = value;
					if ((value != null))
					{
						value.tbl_Categories.Add(this);
						this._IdStatus = value.IdStatus;
					}
					else
					{
						this._IdStatus = default(int);
					}
					this.SendPropertyChanged("tbl_Status");
				}
			}
		}
		
		[Association(Name="tbl_Users_tbl_Categories", Storage="_tbl_Users", ThisKey="IdUserAssigned", OtherKey="IdUser", IsForeignKey=true)]
		public tbl_Users tbl_Users
		{
			get
			{
				return this._tbl_Users.Entity;
			}
			set
			{
				tbl_Users previousValue = this._tbl_Users.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Users.Entity = null;
						previousValue.tbl_Categories.Remove(this);
					}
					this._tbl_Users.Entity = value;
					if ((value != null))
					{
						value.tbl_Categories.Add(this);
						this._IdUserAssigned = value.IdUser;
					}
					else
					{
						this._IdUserAssigned = default(int);
					}
					this.SendPropertyChanged("tbl_Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Tickets(tbl_Tickets entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Categories = this;
		}
		
		private void detach_tbl_Tickets(tbl_Tickets entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Categories = null;
		}
	}
	
	[Table(Name="TicketControl.tbl_Companies")]
	public partial class tbl_Companies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCompany;
		
		private string _Name;
		
		private string _Description;
		
		private int _IdStatus;
		
		private EntitySet<tbl_Users> _tbl_Users;
		
		private EntityRef<tbl_Status> _tbl_Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCompanyChanging(int value);
    partial void OnIdCompanyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdStatusChanging(int value);
    partial void OnIdStatusChanged();
    #endregion
		
		public tbl_Companies()
		{
			this._tbl_Users = new EntitySet<tbl_Users>(new Action<tbl_Users>(this.attach_tbl_Users), new Action<tbl_Users>(this.detach_tbl_Users));
			this._tbl_Status = default(EntityRef<tbl_Status>);
			OnCreated();
		}
		
		[Column(Storage="_IdCompany", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IdStatus", DbType="Int NOT NULL")]
		public int IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					if (this._tbl_Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[Association(Name="tbl_Companies_tbl_Users", Storage="_tbl_Users", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<tbl_Users> tbl_Users
		{
			get
			{
				return this._tbl_Users;
			}
			set
			{
				this._tbl_Users.Assign(value);
			}
		}
		
		[Association(Name="tbl_Status_tbl_Companies", Storage="_tbl_Status", ThisKey="IdStatus", OtherKey="IdStatus", IsForeignKey=true)]
		public tbl_Status tbl_Status
		{
			get
			{
				return this._tbl_Status.Entity;
			}
			set
			{
				tbl_Status previousValue = this._tbl_Status.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Status.Entity = null;
						previousValue.tbl_Companies.Remove(this);
					}
					this._tbl_Status.Entity = value;
					if ((value != null))
					{
						value.tbl_Companies.Add(this);
						this._IdStatus = value.IdStatus;
					}
					else
					{
						this._IdStatus = default(int);
					}
					this.SendPropertyChanged("tbl_Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Companies = this;
		}
		
		private void detach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Companies = null;
		}
	}
	
	[Table(Name="dbo.tbl_Applications")]
	public partial class tbl_Applications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdApplication;
		
		private string _Name;
		
		private string _Description;
		
		private bool _Active;
		
		private EntitySet<tbl_Users> _tbl_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdApplicationChanging(int value);
    partial void OnIdApplicationChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public tbl_Applications()
		{
			this._tbl_Users = new EntitySet<tbl_Users>(new Action<tbl_Users>(this.attach_tbl_Users), new Action<tbl_Users>(this.detach_tbl_Users));
			OnCreated();
		}
		
		[Column(Storage="_IdApplication", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdApplication
		{
			get
			{
				return this._IdApplication;
			}
			set
			{
				if ((this._IdApplication != value))
				{
					this.OnIdApplicationChanging(value);
					this.SendPropertyChanging();
					this._IdApplication = value;
					this.SendPropertyChanged("IdApplication");
					this.OnIdApplicationChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="tbl_Applications_tbl_Users", Storage="_tbl_Users", ThisKey="IdApplication", OtherKey="IdApplication")]
		public EntitySet<tbl_Users> tbl_Users
		{
			get
			{
				return this._tbl_Users;
			}
			set
			{
				this._tbl_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Applications = this;
		}
		
		private void detach_tbl_Users(tbl_Users entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Applications = null;
		}
	}
	
	[Table(Name="dbo.tbl_Users")]
	public partial class tbl_Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdUser;
		
		private string _UserName;
		
		private string _Password;
		
		private string _HashCode;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _CreatedOn;
		
		private System.DateTime _ModifiedOn;
		
		private int _IdRole;
		
		private int _IdStatus;
		
		private string _Email;
		
		private int _IdCompany;
		
		private int _IdApplication;
		
		private EntitySet<tbl_Tickets> _tbl_Tickets;
		
		private EntitySet<tbl_Tickets> _tbl_Tickets1;
		
		private EntitySet<tbl_Categories> _tbl_Categories;
		
		private EntityRef<tbl_Applications> _tbl_Applications;
		
		private EntityRef<tbl_Companies> _tbl_Companies;
		
		private EntityRef<tbl_Roles> _tbl_Roles;
		
		private EntityRef<tbl_Status> _tbl_Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnHashCodeChanging(string value);
    partial void OnHashCodeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnModifiedOnChanging(System.DateTime value);
    partial void OnModifiedOnChanged();
    partial void OnIdRoleChanging(int value);
    partial void OnIdRoleChanged();
    partial void OnIdStatusChanging(int value);
    partial void OnIdStatusChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIdCompanyChanging(int value);
    partial void OnIdCompanyChanged();
    partial void OnIdApplicationChanging(int value);
    partial void OnIdApplicationChanged();
    #endregion
		
		public tbl_Users()
		{
			this._tbl_Tickets = new EntitySet<tbl_Tickets>(new Action<tbl_Tickets>(this.attach_tbl_Tickets), new Action<tbl_Tickets>(this.detach_tbl_Tickets));
			this._tbl_Tickets1 = new EntitySet<tbl_Tickets>(new Action<tbl_Tickets>(this.attach_tbl_Tickets1), new Action<tbl_Tickets>(this.detach_tbl_Tickets1));
			this._tbl_Categories = new EntitySet<tbl_Categories>(new Action<tbl_Categories>(this.attach_tbl_Categories), new Action<tbl_Categories>(this.detach_tbl_Categories));
			this._tbl_Applications = default(EntityRef<tbl_Applications>);
			this._tbl_Companies = default(EntityRef<tbl_Companies>);
			this._tbl_Roles = default(EntityRef<tbl_Roles>);
			this._tbl_Status = default(EntityRef<tbl_Status>);
			OnCreated();
		}
		
		[Column(Storage="_IdUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_HashCode", DbType="VarChar(20)")]
		public string HashCode
		{
			get
			{
				return this._HashCode;
			}
			set
			{
				if ((this._HashCode != value))
				{
					this.OnHashCodeChanging(value);
					this.SendPropertyChanging();
					this._HashCode = value;
					this.SendPropertyChanged("HashCode");
					this.OnHashCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedOn", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[Column(Storage="_IdRole", DbType="Int NOT NULL")]
		public int IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					if (this._tbl_Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[Column(Storage="_IdStatus", DbType="Int NOT NULL")]
		public int IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					if (this._tbl_Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IdCompany", DbType="Int NOT NULL")]
		public int IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._tbl_Companies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_IdApplication", DbType="Int NOT NULL")]
		public int IdApplication
		{
			get
			{
				return this._IdApplication;
			}
			set
			{
				if ((this._IdApplication != value))
				{
					if (this._tbl_Applications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdApplicationChanging(value);
					this.SendPropertyChanging();
					this._IdApplication = value;
					this.SendPropertyChanged("IdApplication");
					this.OnIdApplicationChanged();
				}
			}
		}
		
		[Association(Name="tbl_Users_tbl_Tickets", Storage="_tbl_Tickets", ThisKey="IdUser", OtherKey="CreatedBy")]
		public EntitySet<tbl_Tickets> tbl_Tickets
		{
			get
			{
				return this._tbl_Tickets;
			}
			set
			{
				this._tbl_Tickets.Assign(value);
			}
		}
		
		[Association(Name="tbl_Users_tbl_Tickets1", Storage="_tbl_Tickets1", ThisKey="IdUser", OtherKey="IdAssignedTo")]
		public EntitySet<tbl_Tickets> tbl_Tickets1
		{
			get
			{
				return this._tbl_Tickets1;
			}
			set
			{
				this._tbl_Tickets1.Assign(value);
			}
		}
		
		[Association(Name="tbl_Users_tbl_Categories", Storage="_tbl_Categories", ThisKey="IdUser", OtherKey="IdUserAssigned")]
		public EntitySet<tbl_Categories> tbl_Categories
		{
			get
			{
				return this._tbl_Categories;
			}
			set
			{
				this._tbl_Categories.Assign(value);
			}
		}
		
		[Association(Name="tbl_Applications_tbl_Users", Storage="_tbl_Applications", ThisKey="IdApplication", OtherKey="IdApplication", IsForeignKey=true)]
		public tbl_Applications tbl_Applications
		{
			get
			{
				return this._tbl_Applications.Entity;
			}
			set
			{
				tbl_Applications previousValue = this._tbl_Applications.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Applications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Applications.Entity = null;
						previousValue.tbl_Users.Remove(this);
					}
					this._tbl_Applications.Entity = value;
					if ((value != null))
					{
						value.tbl_Users.Add(this);
						this._IdApplication = value.IdApplication;
					}
					else
					{
						this._IdApplication = default(int);
					}
					this.SendPropertyChanged("tbl_Applications");
				}
			}
		}
		
		[Association(Name="tbl_Companies_tbl_Users", Storage="_tbl_Companies", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public tbl_Companies tbl_Companies
		{
			get
			{
				return this._tbl_Companies.Entity;
			}
			set
			{
				tbl_Companies previousValue = this._tbl_Companies.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Companies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Companies.Entity = null;
						previousValue.tbl_Users.Remove(this);
					}
					this._tbl_Companies.Entity = value;
					if ((value != null))
					{
						value.tbl_Users.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(int);
					}
					this.SendPropertyChanged("tbl_Companies");
				}
			}
		}
		
		[Association(Name="tbl_Roles_tbl_Users", Storage="_tbl_Roles", ThisKey="IdRole", OtherKey="IdRole", IsForeignKey=true)]
		public tbl_Roles tbl_Roles
		{
			get
			{
				return this._tbl_Roles.Entity;
			}
			set
			{
				tbl_Roles previousValue = this._tbl_Roles.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Roles.Entity = null;
						previousValue.tbl_Users.Remove(this);
					}
					this._tbl_Roles.Entity = value;
					if ((value != null))
					{
						value.tbl_Users.Add(this);
						this._IdRole = value.IdRole;
					}
					else
					{
						this._IdRole = default(int);
					}
					this.SendPropertyChanged("tbl_Roles");
				}
			}
		}
		
		[Association(Name="tbl_Status_tbl_Users", Storage="_tbl_Status", ThisKey="IdStatus", OtherKey="IdStatus", IsForeignKey=true)]
		public tbl_Status tbl_Status
		{
			get
			{
				return this._tbl_Status.Entity;
			}
			set
			{
				tbl_Status previousValue = this._tbl_Status.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Status.Entity = null;
						previousValue.tbl_Users.Remove(this);
					}
					this._tbl_Status.Entity = value;
					if ((value != null))
					{
						value.tbl_Users.Add(this);
						this._IdStatus = value.IdStatus;
					}
					else
					{
						this._IdStatus = default(int);
					}
					this.SendPropertyChanged("tbl_Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Tickets(tbl_Tickets entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Users = this;
		}
		
		private void detach_tbl_Tickets(tbl_Tickets entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Users = null;
		}
		
		private void attach_tbl_Tickets1(tbl_Tickets entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Users1 = this;
		}
		
		private void detach_tbl_Tickets1(tbl_Tickets entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Users1 = null;
		}
		
		private void attach_tbl_Categories(tbl_Categories entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Users = this;
		}
		
		private void detach_tbl_Categories(tbl_Categories entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Users = null;
		}
	}
	
	[Table(Name="TicketControl.tbl_GlobalAttributes")]
	public partial class tbl_GlobalAttributes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAttribute;
		
		private string _Name;
		
		private string _Value;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAttributeChanging(int value);
    partial void OnIdAttributeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public tbl_GlobalAttributes()
		{
			OnCreated();
		}
		
		[Column(Storage="_IdAttribute", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAttribute
		{
			get
			{
				return this._IdAttribute;
			}
			set
			{
				if ((this._IdAttribute != value))
				{
					this.OnIdAttributeChanging(value);
					this.SendPropertyChanging();
					this._IdAttribute = value;
					this.SendPropertyChanged("IdAttribute");
					this.OnIdAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SCMailBox.tbl_Comments")]
	public partial class tbl_Comments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdComment;
		
		private string _Name;
		
		private string _Email;
		
		private string _Subject;
		
		private string _Comment;
		
		private System.DateTime _CreatedOn;
		
		private bool _IsRead;
		
		private string _CompanyWorking;
		
		private string _SecurityRating;
		
		private string _CompanyOpinionRating;
		
		private string _SupervisorRating;
		
		private string _GroupDirectorRating;
		
		private string _WorkEnviromentRating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCommentChanging(int value);
    partial void OnIdCommentChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnCompanyWorkingChanging(string value);
    partial void OnCompanyWorkingChanged();
    partial void OnSecurityRatingChanging(string value);
    partial void OnSecurityRatingChanged();
    partial void OnCompanyOpinionRatingChanging(string value);
    partial void OnCompanyOpinionRatingChanged();
    partial void OnSupervisorRatingChanging(string value);
    partial void OnSupervisorRatingChanged();
    partial void OnGroupDirectorRatingChanging(string value);
    partial void OnGroupDirectorRatingChanged();
    partial void OnWorkEnviromentRatingChanging(string value);
    partial void OnWorkEnviromentRatingChanged();
    #endregion
		
		public tbl_Comments()
		{
			OnCreated();
		}
		
		[Column(Storage="_IdComment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdComment
		{
			get
			{
				return this._IdComment;
			}
			set
			{
				if ((this._IdComment != value))
				{
					this.OnIdCommentChanging(value);
					this.SendPropertyChanging();
					this._IdComment = value;
					this.SendPropertyChanged("IdComment");
					this.OnIdCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[Column(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyWorking", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CompanyWorking
		{
			get
			{
				return this._CompanyWorking;
			}
			set
			{
				if ((this._CompanyWorking != value))
				{
					this.OnCompanyWorkingChanging(value);
					this.SendPropertyChanging();
					this._CompanyWorking = value;
					this.SendPropertyChanged("CompanyWorking");
					this.OnCompanyWorkingChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityRating", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string SecurityRating
		{
			get
			{
				return this._SecurityRating;
			}
			set
			{
				if ((this._SecurityRating != value))
				{
					this.OnSecurityRatingChanging(value);
					this.SendPropertyChanging();
					this._SecurityRating = value;
					this.SendPropertyChanged("SecurityRating");
					this.OnSecurityRatingChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyOpinionRating", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string CompanyOpinionRating
		{
			get
			{
				return this._CompanyOpinionRating;
			}
			set
			{
				if ((this._CompanyOpinionRating != value))
				{
					this.OnCompanyOpinionRatingChanging(value);
					this.SendPropertyChanging();
					this._CompanyOpinionRating = value;
					this.SendPropertyChanged("CompanyOpinionRating");
					this.OnCompanyOpinionRatingChanged();
				}
			}
		}
		
		[Column(Storage="_SupervisorRating", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string SupervisorRating
		{
			get
			{
				return this._SupervisorRating;
			}
			set
			{
				if ((this._SupervisorRating != value))
				{
					this.OnSupervisorRatingChanging(value);
					this.SendPropertyChanging();
					this._SupervisorRating = value;
					this.SendPropertyChanged("SupervisorRating");
					this.OnSupervisorRatingChanged();
				}
			}
		}
		
		[Column(Storage="_GroupDirectorRating", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string GroupDirectorRating
		{
			get
			{
				return this._GroupDirectorRating;
			}
			set
			{
				if ((this._GroupDirectorRating != value))
				{
					this.OnGroupDirectorRatingChanging(value);
					this.SendPropertyChanging();
					this._GroupDirectorRating = value;
					this.SendPropertyChanged("GroupDirectorRating");
					this.OnGroupDirectorRatingChanged();
				}
			}
		}
		
		[Column(Storage="_WorkEnviromentRating", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string WorkEnviromentRating
		{
			get
			{
				return this._WorkEnviromentRating;
			}
			set
			{
				if ((this._WorkEnviromentRating != value))
				{
					this.OnWorkEnviromentRatingChanging(value);
					this.SendPropertyChanging();
					this._WorkEnviromentRating = value;
					this.SendPropertyChanged("WorkEnviromentRating");
					this.OnWorkEnviromentRatingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SCMailBox.tbl_GlobalAttributes")]
	public partial class tbl_GlobalAttributesSCM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAttribute;
		
		private string _Name;
		
		private string _Value;
		
		private string _Description;
		
		private System.Nullable<bool> _ShowInGrid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAttributeChanging(int value);
    partial void OnIdAttributeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShowInGridChanging(System.Nullable<bool> value);
    partial void OnShowInGridChanged();
    #endregion
		
		public tbl_GlobalAttributesSCM()
		{
			OnCreated();
		}
		
		[Column(Storage="_IdAttribute", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAttribute
		{
			get
			{
				return this._IdAttribute;
			}
			set
			{
				if ((this._IdAttribute != value))
				{
					this.OnIdAttributeChanging(value);
					this.SendPropertyChanging();
					this._IdAttribute = value;
					this.SendPropertyChanged("IdAttribute");
					this.OnIdAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInGrid", DbType="Bit")]
		public System.Nullable<bool> ShowInGrid
		{
			get
			{
				return this._ShowInGrid;
			}
			set
			{
				if ((this._ShowInGrid != value))
				{
					this.OnShowInGridChanging(value);
					this.SendPropertyChanging();
					this._ShowInGrid = value;
					this.SendPropertyChanged("ShowInGrid");
					this.OnShowInGridChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
